# Performs a 2D crossmatch of Einstein Probe transient and time-matched GraceDB GW events# To see if any EP events (pre-paired with GW events that occurred within 1day of the EPs)# Fall within the 90% confidence region of the sky for their given GW events.# Used personal conda environment with the following installed using pip or conda:    # python=3.10    # pandas    # astropy    # pip install healpy before ligo.skymap because mac silicon issues    # also had to pip install igwn-ligolw later    # Module crossmatch_time was imported locally and can be found in this repo    import pandas as pdimport numpy as npimport crossmatch_timefrom ligo.skymap.postprocess.crossmatch import crossmatchfrom ligo.skymap.io.fits import read_sky_mapfrom astropy.coordinates import SkyCoordimport astropy.units as units###############################################################################def getPairs(): #spatial crossmatch, using time-matched pairs        csv_path = r"/Users/mck/Desktop/palmese_research/crossmatch_analysis_scripts/EP_data1.csv"    ep_data = pd.read_csv(csv_path, comment='#').dropna(how='any', axis='index') #comment='#' removes the units line of the csv from docs        pairs_time = crossmatch_time.getPairs() # returns pairs of EP/GW events occuring within 1day of each other        pairs = {}        for row in pairs_time.iterrows():        gw_filename = row[0]        gw_filepath = "/Users/mck/Desktop/palmese_research/crossmatch_skymaps/" + gw_filename #pre-saved skymaps from crossmatch_graceDB                matches = row[1]        epIDs = matches.index[matches.values]                if len(epIDs)!=0:            ep_cands = ep_data[ ep_data['source name'].isin(epIDs) ]                        ra,dec = np.array(ep_cands['RA'])*units.deg, np.array(ep_cands['DEC'])*units.deg            ep_coords = SkyCoord(ra, dec, frame='icrs')                        results = crossmatch(sky_map = read_sky_map(filename=gw_filepath, moc=True),                                                       coordinates=ep_coords)                        probs = results.searched_prob            #ep_match, probs = np.array(epIDs[ probs < 0.9 ]), np.array(probs[ probs < 0.9 ]) #we are interested in EPs falling in the <90% confidence area            ep_match = epIDs #...but we didn't find any, so all of the crossmatch probabilities are being listed instead                        if ep_match.size != 0:                pairs[gw_filename] = set( (ep_match[i], probs[i]) for i in range(len(ep_match)) )    return pairspairs = getPairs()###############################################################################def prettyPrint_pairs(x): #function for printing final crossmatch pairs legibly        if isinstance(x, tuple):        return f'\t{x}'            elif isinstance(x, set):        s = ''        for t in x:  s = s + '\n' + prettyPrint_pairs(t)        return s            elif isinstance(x, dict):        text = ''        for k in x:             text = text + f'\n\n {k}: ' + prettyPrint_pairs(x[k])        return text                    text = prettyPrint_pairs(pairs)file = open('crossmatch_pairs.txt', 'w')file.write(text)file.close()                                    